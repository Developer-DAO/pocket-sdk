// This file is @generated by prost-build.
/// SettlementResult holds mint, burn, and transfer operations that result from a single claim settlement.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClaimSettlementResult {
    #[prost(message, optional, tag = "1")]
    pub claim: ::core::option::Option<super::proof::Claim>,
    #[prost(message, repeated, tag = "2")]
    pub mints: ::prost::alloc::vec::Vec<MintBurnOp>,
    #[prost(message, repeated, tag = "3")]
    pub burns: ::prost::alloc::vec::Vec<MintBurnOp>,
    #[prost(message, repeated, tag = "4")]
    pub mod_to_mod_transfers: ::prost::alloc::vec::Vec<ModToModTransfer>,
    #[prost(message, repeated, tag = "5")]
    pub mod_to_acct_transfers: ::prost::alloc::vec::Vec<ModToAcctTransfer>,
}
impl ::prost::Name for ClaimSettlementResult {
    const NAME: &'static str = "ClaimSettlementResult";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.ClaimSettlementResult".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.ClaimSettlementResult".into()
    }
}
/// MintBurnOperation holds the parameters of a mint or burn operation.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MintBurnOp {
    #[prost(enumeration = "SettlementOpReason", tag = "1")]
    pub op_reason: i32,
    #[prost(string, tag = "2")]
    pub destination_module: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub coin: ::core::option::Option<super::super::cosmos::base::v1beta1::Coin>,
}
impl ::prost::Name for MintBurnOp {
    const NAME: &'static str = "MintBurnOp";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.MintBurnOp".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.MintBurnOp".into()
    }
}
/// ModToAcctTransfer holds the parameters of a module to account transfer operation.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModToAcctTransfer {
    #[prost(enumeration = "SettlementOpReason", tag = "1")]
    pub op_reason: i32,
    #[prost(string, tag = "2")]
    pub sender_module: ::prost::alloc::string::String,
    /// bech32 address
    #[prost(string, tag = "3")]
    pub recipient_address: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub coin: ::core::option::Option<super::super::cosmos::base::v1beta1::Coin>,
}
impl ::prost::Name for ModToAcctTransfer {
    const NAME: &'static str = "ModToAcctTransfer";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.ModToAcctTransfer".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.ModToAcctTransfer".into()
    }
}
/// ModToModTransfer holds the parameters of a module to module transfer operation.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModToModTransfer {
    #[prost(enumeration = "SettlementOpReason", tag = "1")]
    pub op_reason: i32,
    #[prost(string, tag = "2")]
    pub sender_module: ::prost::alloc::string::String,
    /// This the semantic module named that can be found by searching for "ModuleName =" in the codebase
    #[prost(string, tag = "3")]
    pub recipient_module: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub coin: ::core::option::Option<super::super::cosmos::base::v1beta1::Coin>,
}
impl ::prost::Name for ModToModTransfer {
    const NAME: &'static str = "ModToModTransfer";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.ModToModTransfer".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.ModToModTransfer".into()
    }
}
/// SettlementOpReason is a distinct, tlm-specific causal reason for a given operation.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SettlementOpReason {
    /// UNSPECIFIED is the default value for SettlementOpReason, it is used as a field
    /// type for objects which need to distinguish whether a SettlementOpReason has been specified it or not.
    Unspecified = 0,
    /// Value transfer (credit/debit)
    TlmRelayBurnEqualsMintSupplierStakeMint = 1,
    TlmRelayBurnEqualsMintApplicationStakeBurn = 2,
    /// Inflation
    TlmGlobalMintInflation = 3,
    /// Reward distribution
    TlmRelayBurnEqualsMintSupplierShareholderRewardDistribution = 4,
    TlmGlobalMintDaoRewardDistribution = 5,
    TlmGlobalMintProposerRewardDistribution = 6,
    TlmGlobalMintSupplierShareholderRewardDistribution = 7,
    TlmGlobalMintSourceOwnerRewardDistribution = 8,
    TlmGlobalMintApplicationRewardDistribution = 9,
    /// Self-servicing mitigation
    TlmGlobalMintReimbursementRequestEscrowDaoTransfer = 10,
    /// Penalization
    UnspecifiedTlmSupplierSlashModuleTransfer = 11,
    UnspecifiedTlmSupplierSlashStakeBurn = 12,
    /// Module accounting
    TlmGlobalMintSupplierShareholderRewardModuleTransfer = 13,
    TlmGlobalMintReimbursementRequestEscrowModuleTransfer = 14,
}
impl SettlementOpReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "UNSPECIFIED",
            Self::TlmRelayBurnEqualsMintSupplierStakeMint => {
                "TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_STAKE_MINT"
            }
            Self::TlmRelayBurnEqualsMintApplicationStakeBurn => {
                "TLM_RELAY_BURN_EQUALS_MINT_APPLICATION_STAKE_BURN"
            }
            Self::TlmGlobalMintInflation => "TLM_GLOBAL_MINT_INFLATION",
            Self::TlmRelayBurnEqualsMintSupplierShareholderRewardDistribution => {
                "TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION"
            }
            Self::TlmGlobalMintDaoRewardDistribution => {
                "TLM_GLOBAL_MINT_DAO_REWARD_DISTRIBUTION"
            }
            Self::TlmGlobalMintProposerRewardDistribution => {
                "TLM_GLOBAL_MINT_PROPOSER_REWARD_DISTRIBUTION"
            }
            Self::TlmGlobalMintSupplierShareholderRewardDistribution => {
                "TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION"
            }
            Self::TlmGlobalMintSourceOwnerRewardDistribution => {
                "TLM_GLOBAL_MINT_SOURCE_OWNER_REWARD_DISTRIBUTION"
            }
            Self::TlmGlobalMintApplicationRewardDistribution => {
                "TLM_GLOBAL_MINT_APPLICATION_REWARD_DISTRIBUTION"
            }
            Self::TlmGlobalMintReimbursementRequestEscrowDaoTransfer => {
                "TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_DAO_TRANSFER"
            }
            Self::UnspecifiedTlmSupplierSlashModuleTransfer => {
                "UNSPECIFIED_TLM_SUPPLIER_SLASH_MODULE_TRANSFER"
            }
            Self::UnspecifiedTlmSupplierSlashStakeBurn => {
                "UNSPECIFIED_TLM_SUPPLIER_SLASH_STAKE_BURN"
            }
            Self::TlmGlobalMintSupplierShareholderRewardModuleTransfer => {
                "TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_MODULE_TRANSFER"
            }
            Self::TlmGlobalMintReimbursementRequestEscrowModuleTransfer => {
                "TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_MODULE_TRANSFER"
            }
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNSPECIFIED" => Some(Self::Unspecified),
            "TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_STAKE_MINT" => {
                Some(Self::TlmRelayBurnEqualsMintSupplierStakeMint)
            }
            "TLM_RELAY_BURN_EQUALS_MINT_APPLICATION_STAKE_BURN" => {
                Some(Self::TlmRelayBurnEqualsMintApplicationStakeBurn)
            }
            "TLM_GLOBAL_MINT_INFLATION" => Some(Self::TlmGlobalMintInflation),
            "TLM_RELAY_BURN_EQUALS_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION" => {
                Some(Self::TlmRelayBurnEqualsMintSupplierShareholderRewardDistribution)
            }
            "TLM_GLOBAL_MINT_DAO_REWARD_DISTRIBUTION" => {
                Some(Self::TlmGlobalMintDaoRewardDistribution)
            }
            "TLM_GLOBAL_MINT_PROPOSER_REWARD_DISTRIBUTION" => {
                Some(Self::TlmGlobalMintProposerRewardDistribution)
            }
            "TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_DISTRIBUTION" => {
                Some(Self::TlmGlobalMintSupplierShareholderRewardDistribution)
            }
            "TLM_GLOBAL_MINT_SOURCE_OWNER_REWARD_DISTRIBUTION" => {
                Some(Self::TlmGlobalMintSourceOwnerRewardDistribution)
            }
            "TLM_GLOBAL_MINT_APPLICATION_REWARD_DISTRIBUTION" => {
                Some(Self::TlmGlobalMintApplicationRewardDistribution)
            }
            "TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_DAO_TRANSFER" => {
                Some(Self::TlmGlobalMintReimbursementRequestEscrowDaoTransfer)
            }
            "UNSPECIFIED_TLM_SUPPLIER_SLASH_MODULE_TRANSFER" => {
                Some(Self::UnspecifiedTlmSupplierSlashModuleTransfer)
            }
            "UNSPECIFIED_TLM_SUPPLIER_SLASH_STAKE_BURN" => {
                Some(Self::UnspecifiedTlmSupplierSlashStakeBurn)
            }
            "TLM_GLOBAL_MINT_SUPPLIER_SHAREHOLDER_REWARD_MODULE_TRANSFER" => {
                Some(Self::TlmGlobalMintSupplierShareholderRewardModuleTransfer)
            }
            "TLM_GLOBAL_MINT_REIMBURSEMENT_REQUEST_ESCROW_MODULE_TRANSFER" => {
                Some(Self::TlmGlobalMintReimbursementRequestEscrowModuleTransfer)
            }
            _ => None,
        }
    }
}
/// EventClaimExpired is an event emitted during settlement whenever a claim requiring
/// an onchain proof doesn't have one. The claim cannot be settled, leading to that work
/// never being rewarded.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventClaimExpired {
    #[prost(message, optional, tag = "1")]
    pub claim: ::core::option::Option<super::proof::Claim>,
    /// The reason why the claim expired, leading to a Supplier being penalized (i.e. burn).
    #[prost(enumeration = "ClaimExpirationReason", tag = "2")]
    pub expiration_reason: i32,
    /// Number of relays claimed to be in the session tree.
    #[prost(uint64, tag = "3")]
    pub num_relays: u64,
    /// Number of compute units claimed as a function of the number of relays
    /// and the compute units per relay for the particular service.
    #[prost(uint64, tag = "4")]
    pub num_claimed_compute_units: u64,
    /// Number of estimated compute units claimed as a function of the number of claimed
    /// compute units and the relay difficulty multiplier for the particular service.
    #[prost(uint64, tag = "5")]
    pub num_estimated_compute_units: u64,
    /// The uPOKT coin claimed to be rewarded for the work done as a function of
    /// the number of estimated compute units and the compute uints to token multiplier.
    #[prost(message, optional, tag = "6")]
    pub claimed_upokt: ::core::option::Option<super::super::cosmos::base::v1beta1::Coin>,
}
impl ::prost::Name for EventClaimExpired {
    const NAME: &'static str = "EventClaimExpired";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.EventClaimExpired".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.EventClaimExpired".into()
    }
}
/// EventClaimSettled is an event emitted whenever a claim is settled.
/// The proof_required determines whether the claim requires a proof that has been submitted or not
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventClaimSettled {
    #[prost(message, optional, tag = "1")]
    pub claim: ::core::option::Option<super::proof::Claim>,
    /// The reason why the claim was settled, leading to a Supplier being rewarded (i.e. mint).
    #[prost(enumeration = "super::proof::ProofRequirementReason", tag = "2")]
    pub proof_requirement: i32,
    /// Number of relays claimed to be in the session tree.
    #[prost(uint64, tag = "3")]
    pub num_relays: u64,
    /// Number of compute units claimed as a function of the number of relays
    /// and the compute units per relay for the particular service.
    #[prost(uint64, tag = "4")]
    pub num_claimed_compute_units: u64,
    /// Number of estimated compute units claimed as a function of the number of claimed
    /// compute units and the relay difficulty multiplier for the particular service.
    #[prost(uint64, tag = "5")]
    pub num_estimated_compute_units: u64,
    /// The uPOKT coin claimed to be rewarded for the work done as a function of
    /// the number of estimated compute units and the compute uints to token multiplier.
    #[prost(message, optional, tag = "6")]
    pub claimed_upokt: ::core::option::Option<super::super::cosmos::base::v1beta1::Coin>,
    /// SettlementResult holds mint, burn, and transfer operations on a per-claim basis.
    #[prost(message, optional, tag = "7")]
    pub settlement_result: ::core::option::Option<ClaimSettlementResult>,
}
impl ::prost::Name for EventClaimSettled {
    const NAME: &'static str = "EventClaimSettled";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.EventClaimSettled".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.EventClaimSettled".into()
    }
}
/// EventApplicationOverserviced is emitted when an application has less stake than
/// what a supplier is claiming (i.e. amount available for burning is insufficient).
/// This means the following will ALWAYS be strictly true: effective_burn < expected_burn.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventApplicationOverserviced {
    #[prost(string, tag = "1")]
    pub application_addr: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub supplier_operator_addr: ::prost::alloc::string::String,
    /// Expected burn is the amount the supplier is claiming for work done
    /// to service the application during the session.
    /// This is usually the amount in the Claim submitted.
    #[prost(message, optional, tag = "3")]
    pub expected_burn: ::core::option::Option<super::super::cosmos::base::v1beta1::Coin>,
    /// Effective burn is the amount that is actually being paid to the supplier
    /// for the work done. It is less than the expected burn (claim amount) and
    /// is a function of the relay mining algorithm.
    /// E.g. The application's stake divided by the number of suppliers in a session.
    #[prost(message, optional, tag = "4")]
    pub effective_burn: ::core::option::Option<
        super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for EventApplicationOverserviced {
    const NAME: &'static str = "EventApplicationOverserviced";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.EventApplicationOverserviced".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.EventApplicationOverserviced".into()
    }
}
/// EventSupplierSlashed is emitted when a supplier is slashed for not providing,
/// or provided invalid required proofs for claims.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventSupplierSlashed {
    #[prost(message, optional, tag = "1")]
    pub claim: ::core::option::Option<super::proof::Claim>,
    /// Amount slashed from the supplier's stake due to the expired claims.
    /// This is a function of the number of expired claims and proof missing penalty.
    #[prost(message, optional, tag = "2")]
    pub proof_missing_penalty: ::core::option::Option<
        super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for EventSupplierSlashed {
    const NAME: &'static str = "EventSupplierSlashed";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.EventSupplierSlashed".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.EventSupplierSlashed".into()
    }
}
/// EventApplicationReimbursementRequest is emitted when an application requests
/// a reimbursement.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventApplicationReimbursementRequest {
    #[prost(string, tag = "1")]
    pub application_addr: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub supplier_operator_addr: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub supplier_owner_addr: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub service_id: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub session_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "6")]
    pub amount: ::core::option::Option<super::super::cosmos::base::v1beta1::Coin>,
}
impl ::prost::Name for EventApplicationReimbursementRequest {
    const NAME: &'static str = "EventApplicationReimbursementRequest";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.EventApplicationReimbursementRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.EventApplicationReimbursementRequest".into()
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ClaimExpirationReason {
    /// Default value, means may be valid
    ExpirationReasonUnspecified = 0,
    ProofMissing = 1,
    ProofInvalid = 2,
}
impl ClaimExpirationReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ExpirationReasonUnspecified => "EXPIRATION_REASON_UNSPECIFIED",
            Self::ProofMissing => "PROOF_MISSING",
            Self::ProofInvalid => "PROOF_INVALID",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "EXPIRATION_REASON_UNSPECIFIED" => Some(Self::ExpirationReasonUnspecified),
            "PROOF_MISSING" => Some(Self::ProofMissing),
            "PROOF_INVALID" => Some(Self::ProofInvalid),
            _ => None,
        }
    }
}
/// Params defines the parameters for the tokenomics module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// mint_allocation_percentages represents the distribution of newly minted tokens,
    /// at the end of claim settlement, as a result of the Global Mint TLM.
    #[prost(message, optional, tag = "1")]
    pub mint_allocation_percentages: ::core::option::Option<MintAllocationPercentages>,
    /// dao_reward_address is the address to which mint_allocation_dao percentage of the
    /// minted tokens are at the end of claim settlement.
    ///
    /// Bech32 cosmos address
    #[prost(string, tag = "6")]
    pub dao_reward_address: ::prost::alloc::string::String,
    /// global_inflation_per_claim is the percentage of a claim's claimable uPOKT amount which will be minted on settlement.
    #[prost(double, tag = "7")]
    pub global_inflation_per_claim: f64,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.Params".into()
    }
}
/// MintAllocationPercentages represents the distribution of newly minted tokens,
/// at the end of claim settlement, as a result of the Global Mint TLM.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MintAllocationPercentages {
    /// dao is the percentage of the minted tokens which are sent
    /// to the DAO reward address during claim settlement.
    #[prost(double, tag = "1")]
    pub dao: f64,
    /// proposer is the percentage of the minted tokens which are sent
    /// to the block proposer account address during claim settlement.
    #[prost(double, tag = "2")]
    pub proposer: f64,
    /// supplier is the percentage of the minted tokens which are sent
    /// to the block supplier account address during claim settlement.
    #[prost(double, tag = "3")]
    pub supplier: f64,
    /// source_owner is the percentage of the minted tokens which are sent
    /// to the service source owner account address during claim settlement.
    #[prost(double, tag = "4")]
    pub source_owner: f64,
    /// allocation_application is the percentage of the minted tokens which are sent
    /// to the application account address during claim settlement.
    #[prost(double, tag = "5")]
    pub application: f64,
}
impl ::prost::Name for MintAllocationPercentages {
    const NAME: &'static str = "MintAllocationPercentages";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.MintAllocationPercentages".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.MintAllocationPercentages".into()
    }
}
/// GenesisState defines the tokenomics module's genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// params defines all the parameters of the module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.GenesisState".into()
    }
}
/// QueryParamsRequest is request type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
impl ::prost::Name for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.QueryParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.QueryParamsRequest".into()
    }
}
/// QueryParamsResponse is response type for the Query/Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params holds all the parameters of this module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.QueryParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.QueryParamsResponse".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Parameters queries the parameters of the module.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.tokenomics.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.tokenomics.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// MsgUpdateParams is the Msg/UpdateParams request type to update all params at once.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// params defines the x/tokenomics parameters to update.
    /// NOTE: All parameters must be supplied.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
    const NAME: &'static str = "MsgUpdateParams";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.MsgUpdateParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.MsgUpdateParams".into()
    }
}
/// MsgUpdateParamsResponse defines the response structure for executing a
/// MsgUpdateParams message.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParamsResponse {
    const NAME: &'static str = "MsgUpdateParamsResponse";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.MsgUpdateParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.MsgUpdateParamsResponse".into()
    }
}
/// MsgUpdateParam is the Msg/UpdateParam request type to update a single param.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParam {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The (name, as_type) tuple must match the corresponding name and type as
    /// specified in the `Params` message in `proof/params.proto.`
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(oneof = "msg_update_param::AsType", tags = "3, 4, 5")]
    pub as_type: ::core::option::Option<msg_update_param::AsType>,
}
/// Nested message and enum types in `MsgUpdateParam`.
pub mod msg_update_param {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum AsType {
        #[prost(message, tag = "3")]
        AsMintAllocationPercentages(super::MintAllocationPercentages),
        #[prost(string, tag = "4")]
        AsString(::prost::alloc::string::String),
        #[prost(double, tag = "5")]
        AsFloat(f64),
    }
}
impl ::prost::Name for MsgUpdateParam {
    const NAME: &'static str = "MsgUpdateParam";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.MsgUpdateParam".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.MsgUpdateParam".into()
    }
}
/// MsgUpdateParamResponse defines the response structure for executing a
/// MsgUpdateParam message after a single param update.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParamResponse {
    const NAME: &'static str = "MsgUpdateParamResponse";
    const PACKAGE: &'static str = "pocket.tokenomics";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.tokenomics.MsgUpdateParamResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.tokenomics.MsgUpdateParamResponse".into()
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// UpdateParams defines a (governance) operation for updating the module
        /// parameters. The authority defaults to the x/gov module account.
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.tokenomics.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.tokenomics.Msg", "UpdateParams"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_param(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParam>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.tokenomics.Msg/UpdateParam",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.tokenomics.Msg", "UpdateParam"));
            self.inner.unary(req, path, codec).await
        }
    }
}
