// This file is @generated by prost-build.
/// SessionHeader is a lightweight header for a session that can be passed around.
/// It is the minimal amount of data required to hydrate & retrieve all data relevant to the session.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SessionHeader {
    /// The Bech32 address of the application.
    #[prost(string, tag = "1")]
    pub application_address: ::prost::alloc::string::String,
    /// The service id this session is for
    #[prost(string, tag = "2")]
    pub service_id: ::prost::alloc::string::String,
    /// NOTE: session_id can be derived from the above values using onchain but is included in the header for convenience
    ///
    /// A unique pseudorandom ID for this session
    #[prost(string, tag = "3")]
    pub session_id: ::prost::alloc::string::String,
    /// The height at which this session started
    #[prost(int64, tag = "4")]
    pub session_start_block_height: i64,
    /// Note that`session_end_block_height` is a derivative of (`start` + `num_blocks_per_session`)
    /// as governed by onchain params at the time of the session start.
    /// It is stored as an additional field to simplify business logic in case
    /// the number of blocks_per_session changes during the session.
    ///
    /// The height at which this session ended, this is the last block of the session
    #[prost(int64, tag = "5")]
    pub session_end_block_height: i64,
}
impl ::prost::Name for SessionHeader {
    const NAME: &'static str = "SessionHeader";
    const PACKAGE: &'static str = "pocket.session";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.session.SessionHeader".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.session.SessionHeader".into()
    }
}
/// Session is a fully hydrated session object that contains all the information for the Session
/// and its participants.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Session {
    /// The header of the session containing lightweight data
    #[prost(message, optional, tag = "1")]
    pub header: ::core::option::Option<SessionHeader>,
    /// A unique pseudorandom ID for this session
    #[prost(string, tag = "2")]
    pub session_id: ::prost::alloc::string::String,
    /// The session number since genesis
    #[prost(int64, tag = "3")]
    pub session_number: i64,
    /// The number of blocks per session when this session started
    #[prost(int64, tag = "4")]
    pub num_blocks_per_session: i64,
    /// A fully hydrated application object this session is for
    #[prost(message, optional, tag = "5")]
    pub application: ::core::option::Option<super::application::Application>,
    /// A fully hydrated set of servicers that are serving the application
    #[prost(message, repeated, tag = "6")]
    pub suppliers: ::prost::alloc::vec::Vec<super::shared::Supplier>,
}
impl ::prost::Name for Session {
    const NAME: &'static str = "Session";
    const PACKAGE: &'static str = "pocket.session";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.session.Session".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.session.Session".into()
    }
}
/// Params defines the parameters for the module.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Params {
    /// num_suppliers_per_session is the maximum number of suppliers per session
    /// (application:supplier pair for a given session number).
    #[prost(uint64, tag = "3")]
    pub num_suppliers_per_session: u64,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "pocket.session";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.session.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.session.Params".into()
    }
}
/// GenesisState defines the session module's genesis state.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// params defines all the parameters of the module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "pocket.session";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.session.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.session.GenesisState".into()
    }
}
/// QueryParamsRequest is request type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
impl ::prost::Name for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";
    const PACKAGE: &'static str = "pocket.session";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.session.QueryParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.session.QueryParamsRequest".into()
    }
}
/// QueryParamsResponse is response type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params holds all the parameters of this module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";
    const PACKAGE: &'static str = "pocket.session";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.session.QueryParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.session.QueryParamsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetSessionRequest {
    /// The Bech32 address of the application.
    #[prost(string, tag = "1")]
    pub application_address: ::prost::alloc::string::String,
    /// The service ID to query the session for
    #[prost(string, tag = "2")]
    pub service_id: ::prost::alloc::string::String,
    /// The block height to query the session for
    #[prost(int64, tag = "3")]
    pub block_height: i64,
}
impl ::prost::Name for QueryGetSessionRequest {
    const NAME: &'static str = "QueryGetSessionRequest";
    const PACKAGE: &'static str = "pocket.session";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.session.QueryGetSessionRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.session.QueryGetSessionRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetSessionResponse {
    #[prost(message, optional, tag = "1")]
    pub session: ::core::option::Option<Session>,
}
impl ::prost::Name for QueryGetSessionResponse {
    const NAME: &'static str = "QueryGetSessionResponse";
    const PACKAGE: &'static str = "pocket.session";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.session.QueryGetSessionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.session.QueryGetSessionResponse".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Parameters queries the parameters of the module.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.session.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.session.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries the session given app_address, service and block_height.
        pub async fn get_session(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryGetSessionRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryGetSessionResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.session.Query/GetSession",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.session.Query", "GetSession"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// MsgUpdateParams is the Msg/UpdateParams request type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// params defines the x/session parameters to update.
    /// NOTE: All parameters must be supplied.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
    const NAME: &'static str = "MsgUpdateParams";
    const PACKAGE: &'static str = "pocket.session";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.session.MsgUpdateParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.session.MsgUpdateParams".into()
    }
}
/// MsgUpdateParamsResponse defines the response structure for executing a
/// MsgUpdateParams message.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {}
impl ::prost::Name for MsgUpdateParamsResponse {
    const NAME: &'static str = "MsgUpdateParamsResponse";
    const PACKAGE: &'static str = "pocket.session";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.session.MsgUpdateParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.session.MsgUpdateParamsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParam {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(oneof = "msg_update_param::AsType", tags = "3")]
    pub as_type: ::core::option::Option<msg_update_param::AsType>,
}
/// Nested message and enum types in `MsgUpdateParam`.
pub mod msg_update_param {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum AsType {
        #[prost(uint64, tag = "3")]
        AsUint64(u64),
    }
}
impl ::prost::Name for MsgUpdateParam {
    const NAME: &'static str = "MsgUpdateParam";
    const PACKAGE: &'static str = "pocket.session";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.session.MsgUpdateParam".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.session.MsgUpdateParam".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamResponse {}
impl ::prost::Name for MsgUpdateParamResponse {
    const NAME: &'static str = "MsgUpdateParamResponse";
    const PACKAGE: &'static str = "pocket.session";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.session.MsgUpdateParamResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.session.MsgUpdateParamResponse".into()
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// UpdateParams defines a (governance) operation for updating the module
        /// parameters. The authority defaults to the x/gov module account.
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.session.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.session.Msg", "UpdateParams"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_param(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParam>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.session.Msg/UpdateParam",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.session.Msg", "UpdateParam"));
            self.inner.unary(req, path, codec).await
        }
    }
}
