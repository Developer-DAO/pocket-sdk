// This file is @generated by prost-build.
/// EventRelayMiningDifficultyUpdated is an event emitted whenever the relay mining difficulty is updated
/// for a given service.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventRelayMiningDifficultyUpdated {
    #[prost(string, tag = "1")]
    pub service_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub prev_target_hash_hex_encoded: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub new_target_hash_hex_encoded: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    pub prev_num_relays_ema: u64,
    #[prost(uint64, tag = "5")]
    pub new_num_relays_ema: u64,
}
impl ::prost::Name for EventRelayMiningDifficultyUpdated {
    const NAME: &'static str = "EventRelayMiningDifficultyUpdated";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.EventRelayMiningDifficultyUpdated".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.EventRelayMiningDifficultyUpdated".into()
    }
}
/// Params defines the parameters for the module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// The amount of uPOKT required to add a new service.
    /// This will be deducted from the signer's account balance,
    /// and transferred to the pocket network foundation.
    #[prost(message, optional, tag = "1")]
    pub add_service_fee: ::core::option::Option<
        super::super::cosmos::base::v1beta1::Coin,
    >,
    /// target_num_relays is the target for the EMA of the number of relays per session.
    /// Per service, onchain relay mining difficulty will be adjusted to maintain this target.
    #[prost(uint64, tag = "2")]
    pub target_num_relays: u64,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.Params".into()
    }
}
/// RelayMiningDifficulty is a message used to store the onchain Relay Mining
/// difficulty associated with a specific service ID.
/// TODO_TECHDEBT: Embed this message in the Service message.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayMiningDifficulty {
    /// The service ID the relay mining difficulty is associated with.
    #[prost(string, tag = "1")]
    pub service_id: ::prost::alloc::string::String,
    /// The block height at which this relay mining difficulty was computed.
    /// This is needed to determine how much time has passed since the last time
    /// the exponential moving average was computed.
    #[prost(int64, tag = "2")]
    pub block_height: i64,
    /// The exponential moving average of the number of relays for this service.
    #[prost(uint64, tag = "3")]
    pub num_relays_ema: u64,
    /// The target hash determining the difficulty to mine relays for this service.
    /// For example, if we use sha256 to hash the (RelayRequest,ReqlayResponse) tuple,
    /// and the difficulty has 4 leading zero bits, then the target hash would be:
    /// 0b0000111... (until 32 bytes are filled up).
    #[prost(bytes = "vec", tag = "4")]
    pub target_hash: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for RelayMiningDifficulty {
    const NAME: &'static str = "RelayMiningDifficulty";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.RelayMiningDifficulty".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.RelayMiningDifficulty".into()
    }
}
/// GenesisState defines the service module's genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// params defines all the parameters of the module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
    #[prost(message, repeated, tag = "2")]
    pub service_list: ::prost::alloc::vec::Vec<super::shared::Service>,
    #[prost(message, repeated, tag = "3")]
    pub relay_mining_difficulty_list: ::prost::alloc::vec::Vec<RelayMiningDifficulty>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.GenesisState".into()
    }
}
/// QueryParamsRequest is request type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
impl ::prost::Name for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.QueryParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.QueryParamsRequest".into()
    }
}
/// QueryParamsResponse is response type for the Query/Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params holds all the parameters of this module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.QueryParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.QueryParamsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetServiceRequest {
    /// TODO_IMPROVE: We could support getting services by name.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryGetServiceRequest {
    const NAME: &'static str = "QueryGetServiceRequest";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.QueryGetServiceRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.QueryGetServiceRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetServiceResponse {
    #[prost(message, optional, tag = "1")]
    pub service: ::core::option::Option<super::shared::Service>,
}
impl ::prost::Name for QueryGetServiceResponse {
    const NAME: &'static str = "QueryGetServiceResponse";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.QueryGetServiceResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.QueryGetServiceResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllServicesRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryAllServicesRequest {
    const NAME: &'static str = "QueryAllServicesRequest";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.QueryAllServicesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.QueryAllServicesRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllServicesResponse {
    #[prost(message, repeated, tag = "1")]
    pub service: ::prost::alloc::vec::Vec<super::shared::Service>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryAllServicesResponse {
    const NAME: &'static str = "QueryAllServicesResponse";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.QueryAllServicesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.QueryAllServicesResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetRelayMiningDifficultyRequest {
    #[prost(string, tag = "1")]
    pub service_id: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryGetRelayMiningDifficultyRequest {
    const NAME: &'static str = "QueryGetRelayMiningDifficultyRequest";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.QueryGetRelayMiningDifficultyRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.QueryGetRelayMiningDifficultyRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetRelayMiningDifficultyResponse {
    #[prost(message, optional, tag = "1")]
    pub relay_mining_difficulty: ::core::option::Option<RelayMiningDifficulty>,
}
impl ::prost::Name for QueryGetRelayMiningDifficultyResponse {
    const NAME: &'static str = "QueryGetRelayMiningDifficultyResponse";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.QueryGetRelayMiningDifficultyResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.QueryGetRelayMiningDifficultyResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllRelayMiningDifficultyRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
}
impl ::prost::Name for QueryAllRelayMiningDifficultyRequest {
    const NAME: &'static str = "QueryAllRelayMiningDifficultyRequest";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.QueryAllRelayMiningDifficultyRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.QueryAllRelayMiningDifficultyRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllRelayMiningDifficultyResponse {
    #[prost(message, repeated, tag = "1")]
    pub relay_mining_difficulty: ::prost::alloc::vec::Vec<RelayMiningDifficulty>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryAllRelayMiningDifficultyResponse {
    const NAME: &'static str = "QueryAllRelayMiningDifficultyResponse";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.QueryAllRelayMiningDifficultyResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.QueryAllRelayMiningDifficultyResponse".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Parameters queries the parameters of the module.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.service.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.service.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries a list of Service items.
        pub async fn service(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryGetServiceRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryGetServiceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.service.Query/Service",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.service.Query", "Service"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn all_services(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryAllServicesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryAllServicesResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.service.Query/AllServices",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.service.Query", "AllServices"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries a list of RelayMiningDifficulty items.
        pub async fn relay_mining_difficulty(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryGetRelayMiningDifficultyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryGetRelayMiningDifficultyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.service.Query/RelayMiningDifficulty",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("pocket.service.Query", "RelayMiningDifficulty"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn relay_mining_difficulty_all(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryAllRelayMiningDifficultyRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryAllRelayMiningDifficultyResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.service.Query/RelayMiningDifficultyAll",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("pocket.service.Query", "RelayMiningDifficultyAll"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Relay message
///
/// - Contains both the RelayRequest (signed by the Application) and RelayResponse (signed by the Supplier).
/// - The serialized tuple is stored in SMST leaves as values during the Claim/Proof lifecycle.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Relay {
    #[prost(message, optional, tag = "1")]
    pub req: ::core::option::Option<RelayRequest>,
    #[prost(message, optional, tag = "2")]
    pub res: ::core::option::Option<RelayResponse>,
}
impl ::prost::Name for Relay {
    const NAME: &'static str = "Relay";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.Relay".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.Relay".into()
    }
}
/// RelayRequestMetadata
///
/// Contains metadata for a RelayRequest.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayRequestMetadata {
    /// Session header associated with the relay.
    #[prost(message, optional, tag = "1")]
    pub session_header: ::core::option::Option<super::session::SessionHeader>,
    /// Signature for the request:
    /// - Serialized ring signature, created by either the application itself or a delegated gateway.
    /// - Always uses the application's ring.
    #[prost(bytes = "vec", tag = "2")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
    /// TODO_MAINNET: Ensure this address is checked/verified onchain if needed.
    /// See: <https://github.com/pokt-network/poktroll/pull/567#discussion_r1628722168>
    ///
    /// Supplier operator address:
    /// - The Bech32 address of the supplier operator the relay is sent to.
    /// - Used by the RelayMiner to route to the correct supplier.
    #[prost(string, tag = "3")]
    pub supplier_operator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for RelayRequestMetadata {
    const NAME: &'static str = "RelayRequestMetadata";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.RelayRequestMetadata".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.RelayRequestMetadata".into()
    }
}
/// RelayRequest
///
/// Holds the request details for a relay.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayRequest {
    #[prost(message, optional, tag = "1")]
    pub meta: ::core::option::Option<RelayRequestMetadata>,
    /// Serialized request payload:
    /// - Passed directly to the service.
    /// - Can be any supported format: JSON-RPC, REST, gRPC, etc.
    #[prost(bytes = "vec", tag = "2")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for RelayRequest {
    const NAME: &'static str = "RelayRequest";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.RelayRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.RelayRequest".into()
    }
}
/// RelayResponse
///
/// Contains the response details for a RelayRequest.
///
/// Next index: 5
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayResponse {
    #[prost(message, optional, tag = "1")]
    pub meta: ::core::option::Option<RelayResponseMetadata>,
    /// Serialized response payload:
    /// - Passed directly from the service.
    /// - Can be any supported format: JSON-RPC, REST, gRPC, etc.
    /// - Used when communicating between applications, gatewways, and relayminers
    /// - Omitted when inserting relays into the SMST, and therefore in onchain proofs,
    ///    in order to minimize onchain proof size.
    #[prost(bytes = "vec", tag = "2")]
    pub payload: ::prost::alloc::vec::Vec<u8>,
    /// SHA256 hash of the response payload.
    /// This field is used for proof verification without requiring the full payload.
    /// The hash ensures response integrity while reducing on-chain storage requirements.
    #[prost(bytes = "vec", tag = "4")]
    pub payload_hash: ::prost::alloc::vec::Vec<u8>,
    /// Error returned by the RelayMiner, if applicable.
    /// - If no error occurred, this field is empty.
    #[prost(message, optional, tag = "3")]
    pub relay_miner_error: ::core::option::Option<RelayMinerError>,
}
impl ::prost::Name for RelayResponse {
    const NAME: &'static str = "RelayResponse";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.RelayResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.RelayResponse".into()
    }
}
/// RelayResponseMetadata
///
/// Contains metadata for a RelayResponse.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayResponseMetadata {
    /// Session header associated with the relay.
    #[prost(message, optional, tag = "1")]
    pub session_header: ::core::option::Option<super::session::SessionHeader>,
    /// Signature of the supplier's operator on the response.
    #[prost(bytes = "vec", tag = "2")]
    pub supplier_operator_signature: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for RelayResponseMetadata {
    const NAME: &'static str = "RelayResponseMetadata";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.RelayResponseMetadata".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.RelayResponseMetadata".into()
    }
}
/// RelayMinerError
///
/// Contains error details returned by the RelayMiner.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RelayMinerError {
    /// Registered codespace for the error (groups errors by source/module, e.g. `relayer_proxy`).
    /// See: <https://github.com/pokt-network/poktroll/blob/main/pkg/relayer/proxy/errors.go#L8>
    #[prost(string, tag = "1")]
    pub codespace: ::prost::alloc::string::String,
    /// Specific registered error code (e.g. `1` for `ErrRelayerProxyInvalidSession`)
    /// See: <https://github.com/pokt-network/poktroll/blob/main/pkg/relayer/proxy/errors.go#L9>
    #[prost(uint32, tag = "2")]
    pub code: u32,
    /// Human-readable, concise error description.
    /// Example `invalid session in relayer request` for `ErrRelayerProxyInvalidSession`.
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
    /// Detailed error message (may include additional context).
    /// Example: ErrRelayerProxyInvalidSession.Wrapf("application %q has %d service configs", ...)
    #[prost(string, tag = "4")]
    pub message: ::prost::alloc::string::String,
}
impl ::prost::Name for RelayMinerError {
    const NAME: &'static str = "RelayMinerError";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.RelayMinerError".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.RelayMinerError".into()
    }
}
/// MsgUpdateParams is the Msg/UpdateParams request type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// params defines the x/service parameters to update.
    /// NOTE: All parameters must be supplied.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
    const NAME: &'static str = "MsgUpdateParams";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.MsgUpdateParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.MsgUpdateParams".into()
    }
}
/// MsgUpdateParamsResponse defines the response structure for executing a
/// MsgUpdateParams message.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {}
impl ::prost::Name for MsgUpdateParamsResponse {
    const NAME: &'static str = "MsgUpdateParamsResponse";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.MsgUpdateParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.MsgUpdateParamsResponse".into()
    }
}
/// MsgUpdateParam is the Msg/UpdateParam request type to update a single param.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParam {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The (name, as_type) tuple must match the corresponding name and type as
    /// specified in the `Params` message in `proof/params.proto.`
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(oneof = "msg_update_param::AsType", tags = "3, 4")]
    pub as_type: ::core::option::Option<msg_update_param::AsType>,
}
/// Nested message and enum types in `MsgUpdateParam`.
pub mod msg_update_param {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum AsType {
        #[prost(message, tag = "3")]
        AsCoin(super::super::super::cosmos::base::v1beta1::Coin),
        #[prost(uint64, tag = "4")]
        AsUint64(u64),
    }
}
impl ::prost::Name for MsgUpdateParam {
    const NAME: &'static str = "MsgUpdateParam";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.MsgUpdateParam".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.MsgUpdateParam".into()
    }
}
/// MsgUpdateParamResponse defines the response structure for executing a
/// MsgUpdateParam message after a single param update.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamResponse {}
impl ::prost::Name for MsgUpdateParamResponse {
    const NAME: &'static str = "MsgUpdateParamResponse";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.MsgUpdateParamResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.MsgUpdateParamResponse".into()
    }
}
/// MsgAddService defines a message for adding a new message to the network.
/// Services can be added by any actor in the network making them truly
/// permissionless.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgAddService {
    /// The Bech32 address of the service owner.
    #[prost(string, tag = "1")]
    pub owner_address: ::prost::alloc::string::String,
    /// The Service being added to the network
    #[prost(message, optional, tag = "2")]
    pub service: ::core::option::Option<super::shared::Service>,
}
impl ::prost::Name for MsgAddService {
    const NAME: &'static str = "MsgAddService";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.MsgAddService".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.MsgAddService".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgAddServiceResponse {}
impl ::prost::Name for MsgAddServiceResponse {
    const NAME: &'static str = "MsgAddServiceResponse";
    const PACKAGE: &'static str = "pocket.service";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.service.MsgAddServiceResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.service.MsgAddServiceResponse".into()
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// UpdateParams defines a (governance) operation for updating the module
        /// parameters. The authority defaults to the x/gov module account.
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.service.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.service.Msg", "UpdateParams"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_param(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParam>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.service.Msg/UpdateParam",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.service.Msg", "UpdateParam"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn add_service(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgAddService>,
        ) -> std::result::Result<
            tonic::Response<super::MsgAddServiceResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.service.Msg/AddService",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.service.Msg", "AddService"));
            self.inner.unary(req, path, codec).await
        }
    }
}
