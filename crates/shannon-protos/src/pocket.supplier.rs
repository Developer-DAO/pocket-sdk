// This file is @generated by prost-build.
/// EventSupplierStaked is emitted when a supplier stake message is committed onchain.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventSupplierStaked {
    #[prost(message, optional, tag = "1")]
    pub supplier: ::core::option::Option<super::shared::Supplier>,
    /// The session end height of the last session in which the supplier was staked.
    #[prost(int64, tag = "2")]
    pub session_end_height: i64,
}
impl ::prost::Name for EventSupplierStaked {
    const NAME: &'static str = "EventSupplierStaked";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.EventSupplierStaked".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.EventSupplierStaked".into()
    }
}
/// EventSupplierUnbondingBegin is emitted when an application unstake message
/// is committed onchain, indicating that the supplier will now begin unbonding.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventSupplierUnbondingBegin {
    #[prost(message, optional, tag = "1")]
    pub supplier: ::core::option::Option<super::shared::Supplier>,
    #[prost(enumeration = "SupplierUnbondingReason", tag = "2")]
    pub reason: i32,
    /// The session end height of the last session in which the supplier unbonding began.
    #[prost(int64, tag = "3")]
    pub session_end_height: i64,
    /// The height at which supplier unbonding will end.
    #[prost(int64, tag = "4")]
    pub unbonding_end_height: i64,
}
impl ::prost::Name for EventSupplierUnbondingBegin {
    const NAME: &'static str = "EventSupplierUnbondingBegin";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.EventSupplierUnbondingBegin".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.EventSupplierUnbondingBegin".into()
    }
}
/// EventSupplierUnbondingEnd is emitted when an supplier has completed
/// unbonding. The unbonding period is determined by the shared param,
/// supplier_unbonding_period_sessions.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventSupplierUnbondingEnd {
    #[prost(message, optional, tag = "1")]
    pub supplier: ::core::option::Option<super::shared::Supplier>,
    #[prost(enumeration = "SupplierUnbondingReason", tag = "2")]
    pub reason: i32,
    /// The session end height of the session in which the supplier unbonding endeded.
    #[prost(int64, tag = "3")]
    pub session_end_height: i64,
    /// The height at which supplier unbonding will end.
    #[prost(int64, tag = "4")]
    pub unbonding_end_height: i64,
}
impl ::prost::Name for EventSupplierUnbondingEnd {
    const NAME: &'static str = "EventSupplierUnbondingEnd";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.EventSupplierUnbondingEnd".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.EventSupplierUnbondingEnd".into()
    }
}
/// EventSupplierUnbondingCanceled is emitted when an supplier which was unbonding
/// successfully (re-)stakes before the unbonding period has elapsed. An EventSupplierStaked
/// event will also be emitted immediately after this event.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventSupplierUnbondingCanceled {
    #[prost(message, optional, tag = "1")]
    pub supplier: ::core::option::Option<super::shared::Supplier>,
    /// The exact height at which the supplier unbonding was canceled.
    #[prost(int64, tag = "3")]
    pub height: i64,
    /// The session end height of the session in which the supplier unbonding was canceled.
    #[prost(int64, tag = "2")]
    pub session_end_height: i64,
}
impl ::prost::Name for EventSupplierUnbondingCanceled {
    const NAME: &'static str = "EventSupplierUnbondingCanceled";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.EventSupplierUnbondingCanceled".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.EventSupplierUnbondingCanceled".into()
    }
}
/// EventSupplierServiceConfigActivated is emitted when a supplier service configuration
/// becomes effective at a specific block height.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventSupplierServiceConfigActivated {
    /// supplier contains the complete updated supplier information including the
    /// active service configurations in supplier.Services.
    #[prost(message, optional, tag = "1")]
    pub supplier: ::core::option::Option<super::shared::Supplier>,
    /// activation_height indicates the block height at which the new service
    /// configurations became active.
    #[prost(int64, tag = "2")]
    pub activation_height: i64,
}
impl ::prost::Name for EventSupplierServiceConfigActivated {
    const NAME: &'static str = "EventSupplierServiceConfigActivated";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.EventSupplierServiceConfigActivated".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.EventSupplierServiceConfigActivated".into()
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SupplierUnbondingReason {
    Unspecified = 0,
    Voluntary = 1,
    BelowMinStake = 2,
    Migration = 3,
}
impl SupplierUnbondingReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SUPPLIER_UNBONDING_REASON_UNSPECIFIED",
            Self::Voluntary => "SUPPLIER_UNBONDING_REASON_VOLUNTARY",
            Self::BelowMinStake => "SUPPLIER_UNBONDING_REASON_BELOW_MIN_STAKE",
            Self::Migration => "SUPPLIER_UNBONDING_REASON_MIGRATION",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SUPPLIER_UNBONDING_REASON_UNSPECIFIED" => Some(Self::Unspecified),
            "SUPPLIER_UNBONDING_REASON_VOLUNTARY" => Some(Self::Voluntary),
            "SUPPLIER_UNBONDING_REASON_BELOW_MIN_STAKE" => Some(Self::BelowMinStake),
            "SUPPLIER_UNBONDING_REASON_MIGRATION" => Some(Self::Migration),
            _ => None,
        }
    }
}
/// Params defines the parameters for the module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// min_stake is the minimum amount of uPOKT that a supplier must stake to be
    /// included in network sessions and remain staked.
    #[prost(message, optional, tag = "1")]
    pub min_stake: ::core::option::Option<super::super::cosmos::base::v1beta1::Coin>,
    /// staking_fee is the fee charged by the protocol for staking a supplier.
    #[prost(message, optional, tag = "2")]
    pub staking_fee: ::core::option::Option<super::super::cosmos::base::v1beta1::Coin>,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.Params".into()
    }
}
/// GenesisState defines the supplier module's genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// params defines all the parameters of the module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
    #[prost(message, repeated, tag = "2")]
    pub supplier_list: ::prost::alloc::vec::Vec<super::shared::Supplier>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.GenesisState".into()
    }
}
/// QueryParamsRequest is request type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
impl ::prost::Name for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.QueryParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.QueryParamsRequest".into()
    }
}
/// QueryParamsResponse is response type for the Query/Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params holds all the parameters of this module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.QueryParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.QueryParamsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetSupplierRequest {
    /// TODO_TECHDEBT: Add the ability to query for a supplier by owner_id
    #[prost(string, tag = "1")]
    pub operator_address: ::prost::alloc::string::String,
    /// if true, return a dehydrated version of the supplier.
    /// Why? This enables smaller response payloads to reduce payload size.
    /// Example: Removes service_config_history and rev_share details from the response. See the implementation for more details.
    #[prost(bool, tag = "2")]
    pub dehydrated: bool,
}
impl ::prost::Name for QueryGetSupplierRequest {
    const NAME: &'static str = "QueryGetSupplierRequest";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.QueryGetSupplierRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.QueryGetSupplierRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetSupplierResponse {
    #[prost(message, optional, tag = "1")]
    pub supplier: ::core::option::Option<super::shared::Supplier>,
}
impl ::prost::Name for QueryGetSupplierResponse {
    const NAME: &'static str = "QueryGetSupplierResponse";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.QueryGetSupplierResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.QueryGetSupplierResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllSuppliersRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
    /// if true, return a dehydrated version of the supplier.
    /// Why? This enables smaller response payloads to reduce pagination of the supplier list.
    /// Example: Removes service_config_history and rev_share details from the response. See the implementation for more details.
    #[prost(bool, tag = "3")]
    pub dehydrated: bool,
    #[prost(oneof = "query_all_suppliers_request::Filter", tags = "2")]
    pub filter: ::core::option::Option<query_all_suppliers_request::Filter>,
}
/// Nested message and enum types in `QueryAllSuppliersRequest`.
pub mod query_all_suppliers_request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Filter {
        /// unique service identifier to filter by
        #[prost(string, tag = "2")]
        ServiceId(::prost::alloc::string::String),
    }
}
impl ::prost::Name for QueryAllSuppliersRequest {
    const NAME: &'static str = "QueryAllSuppliersRequest";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.QueryAllSuppliersRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.QueryAllSuppliersRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllSuppliersResponse {
    #[prost(message, repeated, tag = "1")]
    pub supplier: ::prost::alloc::vec::Vec<super::shared::Supplier>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryAllSuppliersResponse {
    const NAME: &'static str = "QueryAllSuppliersResponse";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.QueryAllSuppliersResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.QueryAllSuppliersResponse".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Parameters queries the parameters of the module.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.supplier.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.supplier.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries a list of Supplier items.
        pub async fn supplier(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryGetSupplierRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryGetSupplierResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.supplier.Query/Supplier",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.supplier.Query", "Supplier"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn all_suppliers(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryAllSuppliersRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryAllSuppliersResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.supplier.Query/AllSuppliers",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.supplier.Query", "AllSuppliers"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// MsgUpdateParams is the Msg/UpdateParams request type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// params defines the x/supplier parameters to update.
    /// NOTE: All parameters must be supplied.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
    const NAME: &'static str = "MsgUpdateParams";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.MsgUpdateParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.MsgUpdateParams".into()
    }
}
/// MsgUpdateParamsResponse defines the response structure for executing a
/// MsgUpdateParams message.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {}
impl ::prost::Name for MsgUpdateParamsResponse {
    const NAME: &'static str = "MsgUpdateParamsResponse";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.MsgUpdateParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.MsgUpdateParamsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgStakeSupplier {
    /// The Bech32 address of the message signer (i.e. owner or operator)
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    /// The Bech32 address of the owner (i.e. custodial, staker)
    #[prost(string, tag = "2")]
    pub owner_address: ::prost::alloc::string::String,
    /// The Bech32 address of the operator (i.e. provider, non-custodial)
    #[prost(string, tag = "3")]
    pub operator_address: ::prost::alloc::string::String,
    /// The total amount of uPOKT the supplier has staked. Must be ≥ to the current amount that the supplier has staked (if any)
    #[prost(message, optional, tag = "4")]
    pub stake: ::core::option::Option<super::super::cosmos::base::v1beta1::Coin>,
    /// The list of services this supplier is staked to provide service for
    #[prost(message, repeated, tag = "5")]
    pub services: ::prost::alloc::vec::Vec<super::shared::SupplierServiceConfig>,
}
impl ::prost::Name for MsgStakeSupplier {
    const NAME: &'static str = "MsgStakeSupplier";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.MsgStakeSupplier".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.MsgStakeSupplier".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgStakeSupplierResponse {
    #[prost(message, optional, tag = "1")]
    pub supplier: ::core::option::Option<super::shared::Supplier>,
}
impl ::prost::Name for MsgStakeSupplierResponse {
    const NAME: &'static str = "MsgStakeSupplierResponse";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.MsgStakeSupplierResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.MsgStakeSupplierResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUnstakeSupplier {
    /// The Bech32 address of the message signer (i.e. owner or operator)
    #[prost(string, tag = "1")]
    pub signer: ::prost::alloc::string::String,
    /// The Bech32 address of the operator (i.e. provider, non-custodial)
    #[prost(string, tag = "2")]
    pub operator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for MsgUnstakeSupplier {
    const NAME: &'static str = "MsgUnstakeSupplier";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.MsgUnstakeSupplier".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.MsgUnstakeSupplier".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUnstakeSupplierResponse {
    #[prost(message, optional, tag = "1")]
    pub supplier: ::core::option::Option<super::shared::Supplier>,
}
impl ::prost::Name for MsgUnstakeSupplierResponse {
    const NAME: &'static str = "MsgUnstakeSupplierResponse";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.MsgUnstakeSupplierResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.MsgUnstakeSupplierResponse".into()
    }
}
/// MsgUpdateParam is the Msg/UpdateParam request type to update a single param.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParam {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(oneof = "msg_update_param::AsType", tags = "3")]
    pub as_type: ::core::option::Option<msg_update_param::AsType>,
}
/// Nested message and enum types in `MsgUpdateParam`.
pub mod msg_update_param {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum AsType {
        #[prost(message, tag = "3")]
        AsCoin(super::super::super::cosmos::base::v1beta1::Coin),
    }
}
impl ::prost::Name for MsgUpdateParam {
    const NAME: &'static str = "MsgUpdateParam";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.MsgUpdateParam".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.MsgUpdateParam".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamResponse {
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParamResponse {
    const NAME: &'static str = "MsgUpdateParamResponse";
    const PACKAGE: &'static str = "pocket.supplier";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.supplier.MsgUpdateParamResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.supplier.MsgUpdateParamResponse".into()
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// UpdateParams defines a (governance) operation for updating the module
        /// parameters. The authority defaults to the x/gov module account.
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.supplier.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.supplier.Msg", "UpdateParams"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn stake_supplier(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgStakeSupplier>,
        ) -> std::result::Result<
            tonic::Response<super::MsgStakeSupplierResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.supplier.Msg/StakeSupplier",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.supplier.Msg", "StakeSupplier"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn unstake_supplier(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUnstakeSupplier>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUnstakeSupplierResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.supplier.Msg/UnstakeSupplier",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.supplier.Msg", "UnstakeSupplier"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_param(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParam>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.supplier.Msg/UpdateParam",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.supplier.Msg", "UpdateParam"));
            self.inner.unary(req, path, codec).await
        }
    }
}
