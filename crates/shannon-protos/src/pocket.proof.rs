// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Proof {
    /// Address of the supplier's operator that submitted this proof.
    #[prost(string, tag = "1")]
    pub supplier_operator_address: ::prost::alloc::string::String,
    /// The session header of the session that this claim is for.
    #[prost(message, optional, tag = "2")]
    pub session_header: ::core::option::Option<super::session::SessionHeader>,
    /// The serialized SMST compacted proof from the `#ClosestProof()` method.
    #[prost(bytes = "vec", tag = "3")]
    pub closest_merkle_proof: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for Proof {
    const NAME: &'static str = "Proof";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.Proof".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.Proof".into()
    }
}
/// Claim is the serialized object stored onchain for claims pending to be proven
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Claim {
    /// Address of the supplier's operator that submitted this claim.
    ///
    /// the address of the supplier's operator that submitted this claim
    #[prost(string, tag = "1")]
    pub supplier_operator_address: ::prost::alloc::string::String,
    /// Session header this claim is for.
    #[prost(message, optional, tag = "2")]
    pub session_header: ::core::option::Option<super::session::SessionHeader>,
    /// Root hash from smt.SMST#Root().
    /// TODO_UP_NEXT(@bryanchriswhite, #1497): Dehydrate the claim's root hash from onchain events.
    #[prost(bytes = "vec", tag = "3")]
    pub root_hash: ::prost::alloc::vec::Vec<u8>,
    /// Important: This field MUST only be set by proofKeeper#EnsureValidProofSignaturesAndClosestPath
    #[prost(enumeration = "ClaimProofStatus", tag = "4")]
    pub proof_validation_status: i32,
}
impl ::prost::Name for Claim {
    const NAME: &'static str = "Claim";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.Claim".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.Claim".into()
    }
}
/// SessionSMT is the serializable session's SMST used to persist the session's
/// state offchain by the RelayMiner.
/// It is not used for any onchain logic.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SessionSmt {
    #[prost(message, optional, tag = "1")]
    pub session_header: ::core::option::Option<super::session::SessionHeader>,
    #[prost(string, tag = "2")]
    pub supplier_operator_address: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub smt_root: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for SessionSmt {
    const NAME: &'static str = "SessionSMT";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.SessionSMT".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.SessionSMT".into()
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ProofRequirementReason {
    NotRequired = 0,
    Probabilistic = 1,
    Threshold = 2,
}
impl ProofRequirementReason {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::NotRequired => "NOT_REQUIRED",
            Self::Probabilistic => "PROBABILISTIC",
            Self::Threshold => "THRESHOLD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NOT_REQUIRED" => Some(Self::NotRequired),
            "PROBABILISTIC" => Some(Self::Probabilistic),
            "THRESHOLD" => Some(Self::Threshold),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ClaimProofStage {
    Claimed = 0,
    Proven = 1,
    Settled = 2,
    Expired = 3,
}
impl ClaimProofStage {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Claimed => "CLAIMED",
            Self::Proven => "PROVEN",
            Self::Settled => "SETTLED",
            Self::Expired => "EXPIRED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CLAIMED" => Some(Self::Claimed),
            "PROVEN" => Some(Self::Proven),
            "SETTLED" => Some(Self::Settled),
            "EXPIRED" => Some(Self::Expired),
            _ => None,
        }
    }
}
/// Status of proof validation for a claim
/// Default is PENDING_VALIDATION regardless of proof requirement
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ClaimProofStatus {
    PendingValidation = 0,
    Validated = 1,
    Invalid = 2,
}
impl ClaimProofStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::PendingValidation => "PENDING_VALIDATION",
            Self::Validated => "VALIDATED",
            Self::Invalid => "INVALID",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PENDING_VALIDATION" => Some(Self::PendingValidation),
            "VALIDATED" => Some(Self::Validated),
            "INVALID" => Some(Self::Invalid),
            _ => None,
        }
    }
}
/// Next index: 13
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventClaimCreated {
    #[prost(uint64, tag = "2")]
    pub num_relays: u64,
    #[prost(uint64, tag = "4")]
    pub num_claimed_compute_units: u64,
    #[prost(uint64, tag = "5")]
    pub num_estimated_compute_units: u64,
    #[prost(string, tag = "7")]
    pub claimed_upokt: ::prost::alloc::string::String,
    /// The Service ID to which the claim corresponds.
    #[prost(string, tag = "8")]
    pub service_id: ::prost::alloc::string::String,
    /// The address of the application which participated in the claimed session.
    #[prost(string, tag = "9")]
    pub application_address: ::prost::alloc::string::String,
    /// The end block height of the session to which the claim corresponds.
    #[prost(int64, tag = "10")]
    pub session_end_block_height: i64,
    /// The validation status of the claim.
    /// DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
    /// enum to minimize onchain disk utilization. This is necessary because event
    /// data is not always protobuf-encoded in the various places and formats that it
    /// appears in onchain leveldb databases.
    /// Enum values:
    ///    PENDING_VALIDATION = 0;
    ///    VALIDATED = 1;
    ///    INVALID = 2;
    #[prost(int32, tag = "11")]
    pub claim_proof_status_int: i32,
    /// The operator address of the supplier which submitted the claim.
    #[prost(string, tag = "12")]
    pub supplier_operator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for EventClaimCreated {
    const NAME: &'static str = "EventClaimCreated";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.EventClaimCreated".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.EventClaimCreated".into()
    }
}
/// TODO_TEST: Add coverage for claim updates.
///
/// Next index: 13
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventClaimUpdated {
    #[prost(uint64, tag = "2")]
    pub num_relays: u64,
    #[prost(uint64, tag = "4")]
    pub num_claimed_compute_units: u64,
    #[prost(uint64, tag = "5")]
    pub num_estimated_compute_units: u64,
    #[prost(string, tag = "7")]
    pub claimed_upokt: ::prost::alloc::string::String,
    /// The Service ID to which the claim corresponds.
    #[prost(string, tag = "8")]
    pub service_id: ::prost::alloc::string::String,
    /// The address of the application which participated in the claimed session.
    #[prost(string, tag = "9")]
    pub application_address: ::prost::alloc::string::String,
    /// The end block height of the session to which the claim corresponds.
    #[prost(int64, tag = "10")]
    pub session_end_block_height: i64,
    /// The validation status of the claim.
    /// DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
    /// enum to minimize onchain disk utilization. This is necessary because event
    /// data is not always protobuf-encoded in the various places and formats that it
    /// appears in onchain leveldb databases.
    /// Enum values:
    ///    PENDING_VALIDATION = 0;
    ///    VALIDATED = 1;
    ///    INVALID = 2;
    #[prost(int32, tag = "11")]
    pub claim_proof_status_int: i32,
    /// The operator address of the supplier which updated the claim.
    #[prost(string, tag = "12")]
    pub supplier_operator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for EventClaimUpdated {
    const NAME: &'static str = "EventClaimUpdated";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.EventClaimUpdated".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.EventClaimUpdated".into()
    }
}
/// Next index: 13
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventProofSubmitted {
    #[prost(uint64, tag = "3")]
    pub num_relays: u64,
    #[prost(uint64, tag = "4")]
    pub num_claimed_compute_units: u64,
    #[prost(uint64, tag = "5")]
    pub num_estimated_compute_units: u64,
    #[prost(string, tag = "7")]
    pub claimed_upokt: ::prost::alloc::string::String,
    /// The Service ID to which the claim corresponds.
    #[prost(string, tag = "8")]
    pub service_id: ::prost::alloc::string::String,
    /// The address of the application which participated in the claimed session.
    #[prost(string, tag = "9")]
    pub application_address: ::prost::alloc::string::String,
    /// The end block height of the session to which the claim corresponds.
    #[prost(int64, tag = "10")]
    pub session_end_block_height: i64,
    /// The validation status of the claim.
    /// DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
    /// enum to minimize onchain disk utilization. This is necessary because event
    /// data is not always protobuf-encoded in the various places and formats that it
    /// appears in onchain leveldb databases.
    /// Enum values:
    ///    PENDING_VALIDATION = 0;
    ///    VALIDATED = 1;
    ///    INVALID = 2;
    #[prost(int32, tag = "11")]
    pub claim_proof_status_int: i32,
    /// The operator address of the supplier which submitted the proof.
    #[prost(string, tag = "12")]
    pub supplier_operator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for EventProofSubmitted {
    const NAME: &'static str = "EventProofSubmitted";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.EventProofSubmitted".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.EventProofSubmitted".into()
    }
}
/// TODO_TEST: Add coverage for proof updates.
///
/// Next index: 13
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventProofUpdated {
    #[prost(uint64, tag = "3")]
    pub num_relays: u64,
    #[prost(uint64, tag = "4")]
    pub num_claimed_compute_units: u64,
    #[prost(uint64, tag = "5")]
    pub num_estimated_compute_units: u64,
    #[prost(string, tag = "7")]
    pub claimed_upokt: ::prost::alloc::string::String,
    /// The Service ID to which the claim corresponds.
    #[prost(string, tag = "8")]
    pub service_id: ::prost::alloc::string::String,
    /// The address of the application which participated in the claimed session.
    #[prost(string, tag = "9")]
    pub application_address: ::prost::alloc::string::String,
    /// The end block height of the session to which the claim corresponds.
    #[prost(int64, tag = "10")]
    pub session_end_block_height: i64,
    /// The validation status of the claim.
    /// DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
    /// enum to minimize onchain disk utilization. This is necessary because event
    /// data is not always protobuf-encoded in the various places and formats that it
    /// appears in onchain leveldb databases.
    /// Enum values:
    ///    PENDING_VALIDATION = 0;
    ///    VALIDATED = 1;
    ///    INVALID = 2;
    #[prost(int32, tag = "11")]
    pub claim_proof_status_int: i32,
    /// The operator address of the supplier which updated the proof.
    #[prost(string, tag = "12")]
    pub supplier_operator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for EventProofUpdated {
    const NAME: &'static str = "EventProofUpdated";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.EventProofUpdated".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.EventProofUpdated".into()
    }
}
/// Event emitted after a proof has been checked for validity in the proof module's
/// EndBlocker.
///
/// Next index: 12
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventProofValidityChecked {
    #[prost(uint64, tag = "2")]
    pub block_height: u64,
    /// reason is the string representation of the error that led to the proof being
    /// marked as invalid (e.g. "invalid closest merkle proof", "invalid relay request signature")
    #[prost(string, tag = "4")]
    pub failure_reason: ::prost::alloc::string::String,
    /// The Service ID to which the claim corresponds.
    #[prost(string, tag = "8")]
    pub service_id: ::prost::alloc::string::String,
    /// The address of the application which participated in the claimed session.
    #[prost(string, tag = "9")]
    pub application_address: ::prost::alloc::string::String,
    /// The end block height of the session to which the claim corresponds.
    #[prost(int64, tag = "10")]
    pub session_end_block_height: i64,
    /// The validation status of the claim.
    /// DEV_NOTE: This field uses the integer representation of the ClaimProofStatus
    /// enum to minimize onchain disk utilization. This is necessary because event
    /// data is not always protobuf-encoded in the various places and formats that it
    /// appears in onchain leveldb databases.
    /// Enum values:
    ///    PENDING_VALIDATION = 0;
    ///    VALIDATED = 1;
    ///    INVALID = 2;
    #[prost(int32, tag = "11")]
    pub claim_proof_status_int: i32,
    /// The operator address of the supplier whose proof was checked.
    #[prost(string, tag = "12")]
    pub supplier_operator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for EventProofValidityChecked {
    const NAME: &'static str = "EventProofValidityChecked";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.EventProofValidityChecked".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.EventProofValidityChecked".into()
    }
}
/// Params defines the parameters for the module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Params {
    /// proof_request_probability is the probability of a session requiring a proof
    /// if it's cost (i.e. compute unit consumption) is below the ProofRequirementThreshold.
    #[prost(double, tag = "2")]
    pub proof_request_probability: f64,
    /// proof_requirement_threshold is the session cost (i.e. compute unit consumption)
    /// threshold which asserts that a session MUST have a corresponding proof when its cost
    /// is equal to or above the threshold. This is in contrast to the this requirement
    /// being determined probabilistically via ProofRequestProbability.
    ///
    /// TODO_MAINNET_MIGRATION: Consider renaming this to `proof_requirement_threshold_upokt`.
    #[prost(message, optional, tag = "3")]
    pub proof_requirement_threshold: ::core::option::Option<
        super::super::cosmos::base::v1beta1::Coin,
    >,
    /// proof_missing_penalty is the number of tokens (uPOKT) which should be slashed from a supplier
    /// when a proof is required (either via proof_requirement_threshold or proof_missing_penalty)
    /// but is not provided.
    /// TODO_MAINNET_MIGRATION: Consider renaming this to `proof_missing_penalty_upokt`.
    #[prost(message, optional, tag = "4")]
    pub proof_missing_penalty: ::core::option::Option<
        super::super::cosmos::base::v1beta1::Coin,
    >,
    /// proof_submission_fee is the number of tokens (uPOKT) which should be paid by
    /// the supplier operator when submitting a proof.
    /// This is needed to account for the cost of storing proofs onchain and prevent
    /// spamming (i.e. sybil bloat attacks) the network with non-required proofs.
    /// TODO_MAINNET_MIGRATION: Consider renaming this to `proof_submission_fee_upokt`.
    #[prost(message, optional, tag = "5")]
    pub proof_submission_fee: ::core::option::Option<
        super::super::cosmos::base::v1beta1::Coin,
    >,
}
impl ::prost::Name for Params {
    const NAME: &'static str = "Params";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.Params".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.Params".into()
    }
}
/// GenesisState defines the proof module's genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// params defines all the parameters of the module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
    #[prost(message, repeated, tag = "2")]
    pub claim_list: ::prost::alloc::vec::Vec<Claim>,
    #[prost(message, repeated, tag = "3")]
    pub proof_list: ::prost::alloc::vec::Vec<Proof>,
}
impl ::prost::Name for GenesisState {
    const NAME: &'static str = "GenesisState";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.GenesisState".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.GenesisState".into()
    }
}
/// QueryParamsRequest is request type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
impl ::prost::Name for QueryParamsRequest {
    const NAME: &'static str = "QueryParamsRequest";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.QueryParamsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.QueryParamsRequest".into()
    }
}
/// QueryParamsResponse is response type for the Query/Params RPC method.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params holds all the parameters of this module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for QueryParamsResponse {
    const NAME: &'static str = "QueryParamsResponse";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.QueryParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.QueryParamsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetClaimRequest {
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub supplier_operator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryGetClaimRequest {
    const NAME: &'static str = "QueryGetClaimRequest";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.QueryGetClaimRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.QueryGetClaimRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetClaimResponse {
    #[prost(message, optional, tag = "1")]
    pub claim: ::core::option::Option<Claim>,
}
impl ::prost::Name for QueryGetClaimResponse {
    const NAME: &'static str = "QueryGetClaimResponse";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.QueryGetClaimResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.QueryGetClaimResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllClaimsRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
    #[prost(oneof = "query_all_claims_request::Filter", tags = "2, 3, 4")]
    pub filter: ::core::option::Option<query_all_claims_request::Filter>,
}
/// Nested message and enum types in `QueryAllClaimsRequest`.
pub mod query_all_claims_request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Filter {
        #[prost(string, tag = "2")]
        SupplierOperatorAddress(::prost::alloc::string::String),
        #[prost(string, tag = "3")]
        SessionId(::prost::alloc::string::String),
        #[prost(uint64, tag = "4")]
        SessionEndHeight(u64),
    }
}
impl ::prost::Name for QueryAllClaimsRequest {
    const NAME: &'static str = "QueryAllClaimsRequest";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.QueryAllClaimsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.QueryAllClaimsRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllClaimsResponse {
    #[prost(message, repeated, tag = "1")]
    pub claims: ::prost::alloc::vec::Vec<Claim>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryAllClaimsResponse {
    const NAME: &'static str = "QueryAllClaimsResponse";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.QueryAllClaimsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.QueryAllClaimsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetProofRequest {
    #[prost(string, tag = "1")]
    pub session_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub supplier_operator_address: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryGetProofRequest {
    const NAME: &'static str = "QueryGetProofRequest";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.QueryGetProofRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.QueryGetProofRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryGetProofResponse {
    #[prost(message, optional, tag = "1")]
    pub proof: ::core::option::Option<Proof>,
}
impl ::prost::Name for QueryGetProofResponse {
    const NAME: &'static str = "QueryGetProofResponse";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.QueryGetProofResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.QueryGetProofResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllProofsRequest {
    #[prost(message, optional, tag = "1")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageRequest,
    >,
    #[prost(oneof = "query_all_proofs_request::Filter", tags = "2, 3, 4")]
    pub filter: ::core::option::Option<query_all_proofs_request::Filter>,
}
/// Nested message and enum types in `QueryAllProofsRequest`.
pub mod query_all_proofs_request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Filter {
        #[prost(string, tag = "2")]
        SupplierOperatorAddress(::prost::alloc::string::String),
        #[prost(string, tag = "3")]
        SessionId(::prost::alloc::string::String),
        #[prost(uint64, tag = "4")]
        SessionEndHeight(u64),
    }
}
impl ::prost::Name for QueryAllProofsRequest {
    const NAME: &'static str = "QueryAllProofsRequest";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.QueryAllProofsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.QueryAllProofsRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryAllProofsResponse {
    #[prost(message, repeated, tag = "1")]
    pub proofs: ::prost::alloc::vec::Vec<Proof>,
    #[prost(message, optional, tag = "2")]
    pub pagination: ::core::option::Option<
        super::super::cosmos::base::query::v1beta1::PageResponse,
    >,
}
impl ::prost::Name for QueryAllProofsResponse {
    const NAME: &'static str = "QueryAllProofsResponse";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.QueryAllProofsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.QueryAllProofsResponse".into()
    }
}
/// Generated client implementations.
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Query defines the gRPC querier service.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Parameters queries the parameters of the module.
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.proof.Query/Params",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("pocket.proof.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries a list of Claim items.
        pub async fn claim(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryGetClaimRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryGetClaimResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/pocket.proof.Query/Claim");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("pocket.proof.Query", "Claim"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn all_claims(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryAllClaimsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryAllClaimsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.proof.Query/AllClaims",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.proof.Query", "AllClaims"));
            self.inner.unary(req, path, codec).await
        }
        /// Queries a list of Proof items.
        pub async fn proof(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryGetProofRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryGetProofResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/pocket.proof.Query/Proof");
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("pocket.proof.Query", "Proof"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn all_proofs(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryAllProofsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryAllProofsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.proof.Query/AllProofs",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.proof.Query", "AllProofs"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// MsgUpdateParams is the Msg/UpdateParams request type to update all params at once.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// params defines the x/proof parameters to update.
    /// NOTE: All parameters must be supplied.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
impl ::prost::Name for MsgUpdateParams {
    const NAME: &'static str = "MsgUpdateParams";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.MsgUpdateParams".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.MsgUpdateParams".into()
    }
}
/// MsgUpdateParamsResponse defines the response structure for executing a
/// MsgUpdateParams message.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {}
impl ::prost::Name for MsgUpdateParamsResponse {
    const NAME: &'static str = "MsgUpdateParamsResponse";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.MsgUpdateParamsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.MsgUpdateParamsResponse".into()
    }
}
/// MsgUpdateParam is the Msg/UpdateParam request type to update a single param.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParam {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// The (name, as_type) tuple must match the corresponding name and type as
    /// specified in the `Params`` message in `proof/params.proto.`
    #[prost(string, tag = "2")]
    pub name: ::prost::alloc::string::String,
    #[prost(oneof = "msg_update_param::AsType", tags = "7, 8, 9")]
    pub as_type: ::core::option::Option<msg_update_param::AsType>,
}
/// Nested message and enum types in `MsgUpdateParam`.
pub mod msg_update_param {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum AsType {
        #[prost(bytes, tag = "7")]
        AsBytes(::prost::alloc::vec::Vec<u8>),
        #[prost(double, tag = "8")]
        AsFloat(f64),
        #[prost(message, tag = "9")]
        AsCoin(super::super::super::cosmos::base::v1beta1::Coin),
    }
}
impl ::prost::Name for MsgUpdateParam {
    const NAME: &'static str = "MsgUpdateParam";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.MsgUpdateParam".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.MsgUpdateParam".into()
    }
}
/// MsgUpdateParamResponse defines the response structure for executing a
/// MsgUpdateParam message after a single param update.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamResponse {}
impl ::prost::Name for MsgUpdateParamResponse {
    const NAME: &'static str = "MsgUpdateParamResponse";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.MsgUpdateParamResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.MsgUpdateParamResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateClaim {
    #[prost(string, tag = "1")]
    pub supplier_operator_address: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub session_header: ::core::option::Option<super::session::SessionHeader>,
    /// root returned from smt.SMST#Root()
    #[prost(bytes = "vec", tag = "3")]
    pub root_hash: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for MsgCreateClaim {
    const NAME: &'static str = "MsgCreateClaim";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.MsgCreateClaim".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.MsgCreateClaim".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgCreateClaimResponse {}
impl ::prost::Name for MsgCreateClaimResponse {
    const NAME: &'static str = "MsgCreateClaimResponse";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.MsgCreateClaimResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.MsgCreateClaimResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSubmitProof {
    #[prost(string, tag = "1")]
    pub supplier_operator_address: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub session_header: ::core::option::Option<super::session::SessionHeader>,
    /// serialized version of *smt.SparseCompactMerkleClosestProof
    #[prost(bytes = "vec", tag = "3")]
    pub proof: ::prost::alloc::vec::Vec<u8>,
}
impl ::prost::Name for MsgSubmitProof {
    const NAME: &'static str = "MsgSubmitProof";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.MsgSubmitProof".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.MsgSubmitProof".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgSubmitProofResponse {}
impl ::prost::Name for MsgSubmitProofResponse {
    const NAME: &'static str = "MsgSubmitProofResponse";
    const PACKAGE: &'static str = "pocket.proof";
    fn full_name() -> ::prost::alloc::string::String {
        "pocket.proof.MsgSubmitProofResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/pocket.proof.MsgSubmitProofResponse".into()
    }
}
/// Generated client implementations.
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Msg defines the Msg service.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// UpdateParams defines a (governance) operation for updating the module
        /// parameters. The authority defaults to the x/gov module account.
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParams>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.proof.Msg/UpdateParams",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.proof.Msg", "UpdateParams"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_claim(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCreateClaim>,
        ) -> std::result::Result<
            tonic::Response<super::MsgCreateClaimResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.proof.Msg/CreateClaim",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.proof.Msg", "CreateClaim"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn submit_proof(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSubmitProof>,
        ) -> std::result::Result<
            tonic::Response<super::MsgSubmitProofResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.proof.Msg/SubmitProof",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.proof.Msg", "SubmitProof"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_param(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParam>,
        ) -> std::result::Result<
            tonic::Response<super::MsgUpdateParamResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/pocket.proof.Msg/UpdateParam",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("pocket.proof.Msg", "UpdateParam"));
            self.inner.unary(req, path, codec).await
        }
    }
}
